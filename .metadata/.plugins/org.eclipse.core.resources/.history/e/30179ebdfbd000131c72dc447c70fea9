package com.sccl.summerreadingapp.clients;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.ProgressDialog;
import android.os.AsyncTask;
import android.util.Log;

import com.sccl.summerreadingapp.ConfigAsyncListener;
import com.sccl.summerreadingapp.SummerReadingApplication;
import com.sccl.summerreadingapp.helper.ServiceInvoker;
import com.sccl.summerreadingapp.model.Branch;
import com.sccl.summerreadingapp.model.Config;
import com.sccl.summerreadingapp.model.GridCell;
import com.sccl.summerreadingapp.model.UserType;

/**
 * Async task class to get json by making HTTP call
 * */
public class ConfigClient extends AsyncTask<Void, Void, Void> {
	
	private static final String BRANCH_REQUEST = "http://hackathon.ebaystratus.com/branches.json";
	private static final String USER_TYPE_REQUEST = "http://hackathon.ebaystratus.com/user_types.json";
	private static final String GRID_CELL_REQUEST = "http://hackathon.ebaystratus.com/grids.json";
	private Activity parent;
	private ProgressDialog pDialog;
	private ConfigAsyncListener listener;
	
	// JSON Node names

	public ConfigClient(Activity parent, ConfigAsyncListener listener) {
		super();
		this.parent = parent;
		this.listener = listener;
	}

	@Override
    protected void onPreExecute() {
        super.onPreExecute();
        // Showing progress dialog
        pDialog = new ProgressDialog(parent);
        pDialog.setMessage("Setting Grid result...");
        pDialog.setCancelable(false);
        pDialog.show();

    }

    @Override
    protected Void doInBackground(Void... arg0) {
    	Config config = new Config();
    	ServiceInvoker serviceInvoker = new ServiceInvoker();
    	config.setBranches(getBranchFromUrl(serviceInvoker));
    	config.setUserTypes(getUserTypesFromUrl(serviceInvoker));
    	config.setGridCells(getGridCellFromUrl(serviceInvoker));
    	
    	SummerReadingApplication summerReadingApplication = (SummerReadingApplication) parent.getApplicationContext();
    	summerReadingApplication.setConfig(config);

    	return null;
    }

	private ArrayList<Branch> getBranchFromUrl(ServiceInvoker serviceInvoker) {
		String jsonStr = serviceInvoker.invoke(BRANCH_REQUEST, ServiceInvoker.GET);
    	ArrayList<Branch> branches = new ArrayList<Branch>();

    	Log.d("Response: ", "> " + jsonStr);

    	if (jsonStr != null) {
    		try {
    			JSONArray jsonArray = new JSONArray(jsonStr);
    			for (int i = 0; i < jsonArray.length(); i++) {
	    			JSONObject jsonObj = jsonArray.getJSONObject(i);
	    			branches.add(Branch.createBranch(jsonObj));
    			}
    		} catch (JSONException e) {
    			e.printStackTrace();
    		}
    	} else {
    		Log.e("ServiceHandler", "Couldn't get any data from the url");
    	}

    	return branches;
	}

	private ArrayList<UserType> getUserTypesFromUrl(ServiceInvoker serviceInvoker) {
		String jsonStr = serviceInvoker.invoke(USER_TYPE_REQUEST, ServiceInvoker.GET);

    	ArrayList<UserType> userTypes = new ArrayList<UserType>();
		UserType userType = null;

    	Log.d("Response: ", "> " + jsonStr);

    	if (jsonStr != null) {
    		try {
    			JSONArray jsonArray = new JSONArray(jsonStr);
    			for (int i = 0; i < jsonArray.length(); i++) {
	    			JSONObject jsonObj = jsonArray.getJSONObject(i);
	    			userType = UserType.createUserType(jsonObj);
	    			userTypes.add(userType);
    			}
    		} catch (JSONException e) {
    			e.printStackTrace();
    		}
    	} else {
    		Log.e("ServiceHandler", "Couldn't get any data from the url");
    	}

		return userTypes;
	}

	private ArrayList<GridCell> getGridCellFromUrl(ServiceInvoker serviceInvoker) {
		String jsonStr = serviceInvoker.invoke(GRID_CELL_REQUEST, ServiceInvoker.GET);
    	ArrayList<GridCell> gridCells = new ArrayList<GridCell>();
    	GridCell gridCell = null;

    	Log.d("Response: ", "> " + jsonStr);

    	if (jsonStr != null) {
    		try {
    			JSONArray jsonArray = new JSONArray(jsonStr);
    			for (int i = 0; i < jsonArray.length(); i++) {
	    			JSONObject jsonObj = jsonArray.getJSONObject(i);
	    			gridCell = GridCell.createGridCell(jsonObj);
	    			gridCells.add(gridCell);
    			}
    		} catch (JSONException e) {
    			e.printStackTrace();
    		}
    	} else {
    		Log.e("ServiceHandler", "Couldn't get any data from the url");
    	}

		return gridCells;
	}

    @Override
    protected void onPostExecute(Void result) {
        super.onPostExecute(result);
        // Dismiss the progress dialog
        if (pDialog.isShowing())
            pDialog.dismiss();
        listener.onResult();
    }

}
